---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "State Micro Service API"
basePath: "/v1"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /state/client:
    post:
      summary: "create a new client to store its state information\n"
      description: "When user want to store state information, he should calll this\
        \ end point and get its unique client id. then pass the id for rest of the\
        \ operation"
      operationId: "sessionPOST"
      parameters: []
      responses:
        200:
          description: "Successful response"
          schema:
            type: "string"
            title: "clientId"
      x-swagger-router-controller: "Default"
  /state/{clientId}:
    get:
      summary: "get all the state information for the client"
      description: "Use can call this end point to find all the state information\
        \ stored under the clientId"
      parameters:
      - name: "clientId"
        in: "path"
        description: "the client id whose state information will be returned"
        required: true
        type: "string"
      responses:
        200:
          description: "sucessful operation"
          schema:
            type: "string"
            title: "result"
    delete:
      summary: "delete all of the client's state information"
      description: "When user finished, he should call this end point to clean up\
        \ all the stored state information"
      operationId: "sessionSessionIdDELETE"
      parameters:
      - name: "clientId"
        in: "path"
        description: "the client id to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "Default"
  /state/{clientId}/{key}:
    get:
      summary: "get the state identified by the key"
      description: "User can call this end point to retrieve the value for the particular\
        \ state"
      operationId: "sessionSessionIdKeyGET"
      parameters:
      - name: "clientId"
        in: "path"
        description: "the state id associated with the key"
        required: true
        type: "string"
      - name: "key"
        in: "path"
        description: "the key name"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            title: "value"
        404:
          description: "key not found"
      x-swagger-router-controller: "Default"
    put:
      summary: "create or update the state"
      description: "if the key does not existed, it will create it with the value\
        \ provided otherwise, it will update the existing key with the new value"
      operationId: "sessionSessionIdKeyPUT"
      consumes:
      - "text/plain"
      parameters:
      - name: "clientId"
        in: "path"
        description: "the client id associated with the key"
        required: true
        type: "string"
      - name: "key"
        in: "path"
        description: "the key name"
        required: true
        type: "string"
      - in: "body"
        name: "value"
        description: "the value for the key"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "key/value pair created or updated"
      x-swagger-router-controller: "Default"
    delete:
      summary: "delete the state identified by key"
      description: "delete the state identified by the key"
      operationId: "sessionSessionIdKeyDELETE"
      parameters:
      - name: "clientId"
        in: "path"
        description: "the client id associated with the key"
        required: true
        type: "string"
      - name: "key"
        in: "path"
        description: "the key name"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "Default"
definitions: {}
